-- local dap, dapui = require "dap", require "dapui"
-- local set_sign = vim.fn.sign_define
-- local map = vim.keymap.set
--
-- local M = {}
--
-- -- load .vscode/launch.json
-- require("dap.ext.vscode").load_launchjs(nil, {})
--
-- dap.listeners.after.event_initialized["dapui_config"] = function()
--   dapui.open()
-- end
-- dap.listeners.before.event_terminated["dapui_config"] = function()
--   dapui.close()
-- end
-- dap.listeners.before.event_exited["dapui_config"] = function()
--   dapui.close()
-- end
--
-- set_sign("DapBreakpoint", { linehl = "", text = "", texthl = "diffRemoved", numhl = "" })
-- set_sign("DapBreakpointCondition", { linehl = "", text = "", texthl = "diffRemoved", numhl = "" })
-- set_sign("DapLogPoint", { linehl = "", text = "", texthl = "diffRemoved", numhl = "" })
-- set_sign("DapStopped", { linehl = "GitSignsChangeVirtLn", text = "", texthl = "diffChanged", numhl = "" })
-- set_sign("DapBreakpointRejected", { linehl = "", text = "", texthl = "", numhl = "" })
--
-- M.dap_mason_config = {
--   ensure_installed = { "delve", "node2", "chrome", "firefox", "js" },
-- }
--
-- M.dapui_config = {
--   icons = { expanded = "▾", collapsed = "▸", current_frame = "▸" },
--   mappings = {
--     -- Use a table to apply multiple mappings
--     expand = { "<CR>", "<2-LeftMouse>" },
--     open = "o",
--     remove = "d",
--     edit = "e",
--     repl = "r",
--     toggle = "t",
--   },
--   -- Use this to override mappings for specific elements
--   element_mappings = {
--     -- Example:
--     -- stacks = {
--     --   open = "<CR>",
--     --   expand = "o",
--     -- }
--   },
--   -- Expand lines larger than the window
--   -- Requires >= 0.7
--   expand_lines = vim.fn.has "nvim-0.7" == 1,
--   -- Layouts define sections of the screen to place windows.
--   -- The position can be "left", "right", "top" or "bottom".
--   -- The size specifies the height/width depending on position. It can be an Int
--   -- or a Float. Integer specifies height/width directly (i.e. 20 lines/columns) while
--   -- Float value specifies percentage (i.e. 0.3 - 30% of available lines/columns)
--   -- Elements are the elements shown in the layout (in order).
--   -- Layouts are opened in order so that earlier layouts take priority in window sizing.
--   layouts = {
--     {
--       elements = {
--         -- Elements can be strings or table with id and size keys.
--         { id = "scopes", size = 0.25 },
--         "breakpoints",
--         "stacks",
--         "watches",
--       },
--       size = 40, -- 40 columns
--       position = "left",
--     },
--     {
--       elements = {
--         "repl",
--         "console",
--       },
--       size = 0.25, -- 25% of total lines
--       position = "bottom",
--     },
--   },
--   controls = {
--     -- Requires Neovim nightly (or 0.8 when released)
--     enabled = true,
--     -- Display controls in this element
--     element = "repl",
--     icons = {
--       pause = "",
--       play = "",
--       step_into = "",
--       step_over = "",
--       step_out = "",
--       step_back = "",
--       run_last = "↻",
--       terminate = "",
--     },
--   },
--   floating = {
--     max_height = nil, -- These can be integers or a float between 0 and 1.
--     max_width = nil, -- Floats will be treated as percentage of your screen.
--     border = "single", -- Border style. Can be "single", "double" or "rounded"
--     mappings = {
--       close = { "q", "<Esc>" },
--     },
--   },
--   windows = { indent = 1 },
--   render = {
--     max_type_length = nil, -- Can be integer or nil.
--     max_value_lines = 100, -- Can be integer or nil.
--   },
-- }
--
-- map("n", "<F5>", require("dap").continue, { desc = "Debug: Continue" })
-- map("n", "<F10>", require("dap").step_over, { desc = "Debug: Step over" })
-- map("n", "<F11>", require("dap").step_into, { desc = "Debug: Step into" })
-- map("n", "<F12>", require("dap").step_out, { desc = "Debug: Step out" })
-- map("n", "<leader>b", require("dap").toggle_breakpoint, { desc = "Debug: Toggle breakpoint" })
-- map(
--   "n",
--   "<leader>b",
--   require("dap").toggle_breakpoint(vim.fn.input "Breakpoint condition: "),
--   { desc = "Debug: Set conditional breakpoint" }
-- )
-- map(
--   "n",
--   "<leader>lp",
--   require("dap").toggle_breakpoint(nil, nil, vim.fn.input "Log point message: "),
--   { desc = "Debug: Set Log point" }
-- )
-- map("n", "<leader>dl", require("dap").run_last, { desc = "Debug: Run last" })
-- map("n", "<leader>dr", require("dap").repl.open, { desc = "Debug: Open REPL" })
--
-- return M
